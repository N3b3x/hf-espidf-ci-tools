---
name: Security Audit (Reusable)

on:
  workflow_call:
    inputs:
      project_dir:
        description: "Path to the ESP-IDF project (contains CMakeLists.txt)"
        type: string
        required: true
      project_tools_dir:
        description: >
          Path to project tools directory (contains scripts directly).
          Leave empty to auto-detect in project directory or auto-clone from
          tools_repo_url.
        type: string
        required: false
      scan_type:
        description: "all | dependencies | secrets | codeql"
        type: string
        default: "all"
      run_codeql:
        description: "Enable CodeQL job"
        type: boolean
        default: true
      codeql_languages:
        description: "Comma-separated (e.g., cpp,python)"
        type: string
        default: "cpp"
      auto_clone_tools:
        description: "Auto-clone tools repo if project_tools_dir is missing"
        type: boolean
        default: true

permissions:
  contents: read
  security-events: write

env:
  ESP32_PROJECT_PATH: ${{ inputs.project_dir }}
  PROJECT_TOOLS_DIR: ${{ inputs.project_tools_dir }}

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.gen.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Ensure tools directory present
        id: tools-validate
        uses: N3b3x/hf-espidf-ci-tools/.github/actions/ensure-tools-directory@main
        with:
          project_tools_dir: ${{ env.PROJECT_TOOLS_DIR }}
          project_dir: ${{ env.ESP32_PROJECT_PATH }}
          auto_clone_tools: ${{ inputs.auto_clone_tools }}

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jq

      - name: Generate matrix
        id: gen
        run: |
          set -e
          MATRIX=$(python3 "${{ steps.tools-validate.outputs.project_tools_path }}/generate_matrix.py")
          echo "matrix=${MATRIX}" >> "$GITHUB_OUTPUT"
          echo "$MATRIX" | python3 -m json.tool

  dependencies:
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'dependencies' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety bandit
      - name: Find requirements
        run: |
          set -e
          FILES=$(git ls-files | grep -E 'requirements(\.txt|\.in)?$' || true)
          if [ -z "$FILES" ]; then
            echo "No requirements files found, skipping dependency scanning"
            echo "" > req-list
          else
            echo "$FILES" > req-list
          fi
          cat req-list
      - name: pip-audit
        run: |
          if [ -s req-list ]; then
            while read -r f; do
              if [ -n "$f" ]; then
                echo "==> $f"
                pip-audit --requirement "$f" || true
              fi
            done < req-list
          else
            echo "No requirements files found, skipping pip-audit"
          fi
      - name: safety
        run: |
          if [ -s req-list ]; then
            while read -r f; do
              if [ -n "$f" ]; then
                echo "==> $f"
                safety check -r "$f" || true
              fi
            done < req-list
          else
            echo "No requirements files found, skipping safety check"
          fi
      - name: bandit (python sources)
        run: |
          bandit -r . || true

  secrets:
    if: ${{ inputs.scan_type == 'all' || inputs.scan_type == 'secrets' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install gitleaks
        run: |
          curl -sSL \
            "https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz" \
            -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks && chmod +x gitleaks
          sudo mv gitleaks /usr/local/bin/
      - name: Run gitleaks
        run: |
          gitleaks detect --source . --report-format json \
            --report-path gitleaks-report.json || true
      - name: Upload report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('gitleaks-report.json') != ''
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 30

  codeql:
    if: >
      ${{ (inputs.scan_type == 'all' || inputs.scan_type == 'codeql') &&
      inputs.run_codeql == true }}
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Ensure tools directory present
        id: tools-validate-codeql
        uses: N3b3x/hf-espidf-ci-tools/.github/actions/ensure-tools-directory@main
        with:
          project_tools_dir: ${{ env.PROJECT_TOOLS_DIR }}
          project_dir: ${{ env.ESP32_PROJECT_PATH }}
          auto_clone_tools: ${{ inputs.auto_clone_tools }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ inputs.codeql_languages }}

      - name: Autobuild (best effort)
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: Manual build using build_app.sh (matrix-based)
        run: |
          set -e
          echo "Building for CodeQL analysis using build_app.sh..."
          echo "Matrix: ${{ matrix.idf_version }} · ${{ matrix.build_type }}" \
               " · ${{ matrix.app_name }}"
          echo "Project: ${{ env.ESP32_PROJECT_PATH }}"
          echo "Project Tools: ${{ env.PROJECT_TOOLS_DIR }}"
          echo "Target: ${{ matrix.target }}"

          # Use the resolved project tools path from the tools validation step
          SCRIPTS_PATH="${{ steps.tools-validate-codeql.outputs.project_tools_path }}"

          # Debug: List ESP32 project directory contents
          echo "======================================================"
          echo "ESP32 PROJECT DIRECTORY DEBUG INFO (CodeQL)"
          echo "======================================================"
          echo "ESP32 project path: ${{ env.ESP32_PROJECT_PATH }}"
          echo "Current working directory: $(pwd)"
          echo ""
          echo "Current directory contents:"
          ls -la . || echo "Failed to list current directory"
          echo ""
          echo "Looking for key files:"
          for file in CMakeLists.txt app_config.yml main components; do
            if [ -e "./${ESP32_PROJECT_PATH}/${file}" ]; then
              echo "✓ Found ${file}: $(ls -la "./${ESP32_PROJECT_PATH}/${file}")"
            else
              echo "✗ Missing ${file}"
            fi
          done
          echo "======================================================"
          echo ""

          # Debug: List scripts directory contents and check permissions
          echo "======================================================"
          echo "SCRIPTS DIRECTORY DEBUG INFO (CodeQL)"
          echo "======================================================"
          echo "Scripts path: ${SCRIPTS_PATH}"
          echo "Current working directory: $(pwd)"
          echo ""
          echo "Scripts directory contents:"
          ls -la "${SCRIPTS_PATH}" || echo "Failed to list scripts directory"
          echo ""
          echo "Checking script permissions:"
          for script in build_app.sh flash_app.sh config_loader.sh generate_matrix.py; do
            script_path="${SCRIPTS_PATH}/$script"
            if [ -f "$script_path" ]; then
              echo "✓ Found $script: $(ls -la "$script_path")"
              # Ensure script is executable
              chmod +x "$script_path" 2>/dev/null || echo "Warning: Could not chmod $script"
            else
              echo "✗ Missing $script"
            fi
          done
          echo "======================================================"
          echo ""

          if [ -f "${SCRIPTS_PATH}/build_app.sh" ]; then
            echo "Running build_app.sh for CodeQL analysis..."
            chmod +x "${SCRIPTS_PATH}/build_app.sh"
            "${SCRIPTS_PATH}/build_app.sh" \
              --project-path "${ESP32_PROJECT_PATH}" \
              "${{ matrix.app_name }}" \
              "${{ matrix.build_type }}" \
              "${{ matrix.idf_version }}"
          else
            echo "Warning: build_app.sh not found, falling back to idf.py build"
            idf.py build
          fi

      - name: Analyze
        uses: github/codeql-action/analyze@v3
