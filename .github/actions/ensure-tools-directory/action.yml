---
name: "Ensure Tools Directory Present"
description: "Clone or validate the presence of project tools directory"
inputs:
  project_tools_dir:
    description: >
      Path to project tools directory (contains scripts directly).
      Leave empty to auto-detect.
    required: false
  project_dir:
    description: "Path to the ESP-IDF project (contains CMakeLists.txt)"
    required: false
    default: "."
  auto_clone_tools:
    description: "Auto-clone tools repo if project_tools_dir is missing"
    required: false
    default: "true"
outputs:
  project_tools_path:
    description: "Resolved path to the project tools directory"
    value: ${{ steps.resolve.outputs.project_tools_path }}
runs:
  using: "composite"
  steps:
    - name: Resolve and ensure tools directory
      id: resolve
      shell: bash
      run: |
        set -e
        
        # Use hardcoded trusted repository URL and main branch
        TOOLS_REPO_URL="https://github.com/N3b3x/hf-espidf-project-tools.git"
        TOOLS_BRANCH="main"
        TOOLS_DIR_NAME=$(basename "${TOOLS_REPO_URL}" .git)
        echo "Tools directory name: ${TOOLS_DIR_NAME}"
        
        # Resolve project tools path using consistent logic - always output relative paths
        if [ -n "${{ inputs.project_tools_dir }}" ]; then
          # Use the input as-is if it's already relative, or make it relative if absolute
          if [[ "${{ inputs.project_tools_dir }}" == /* ]]; then
            # Convert absolute path to relative by removing the workspace root
            SCRIPTS_PATH=$(echo "${{ inputs.project_tools_dir }}" | sed "s|^$(pwd)/||")
          else
            SCRIPTS_PATH="${{ inputs.project_tools_dir }}"
          fi
        else
          if [ -d "${{ inputs.project_dir }}/${TOOLS_DIR_NAME}" ]; then
            SCRIPTS_PATH="${{ inputs.project_dir }}/${TOOLS_DIR_NAME}"
          else
            SCRIPTS_PATH="${TOOLS_DIR_NAME}"
          fi
        fi

        echo "Resolved project tools path (relative): ${SCRIPTS_PATH}"
        
        # Also resolve project directory path to absolute
        if [[ "${{ inputs.project_dir }}" == /* ]]; then
          PROJECT_PATH="${{ inputs.project_dir }}"
        else
          PROJECT_PATH="$(pwd)/${{ inputs.project_dir }}"
        fi
        echo "Resolved project path: ${PROJECT_PATH}"
        
        # Check if directory exists and handle accordingly
        if [ ! -d "${SCRIPTS_PATH}" ]; then
          # Only auto-clone if project_tools_dir was not explicitly provided
          if [ -z "${{ inputs.project_tools_dir }}" ] && [ "${{ inputs.auto_clone_tools }}" = "true" ]; then
            echo "Auto-cloning tools repo to ${SCRIPTS_PATH}"
            
            # Security: Using hardcoded trusted repository URL and main branch
            echo "Cloning from trusted source: ${TOOLS_REPO_URL} (${TOOLS_BRANCH} branch)"
            git clone --depth 1 --branch "${TOOLS_BRANCH}" \
              "${TOOLS_REPO_URL}" "${SCRIPTS_PATH}"
          else
            echo "ERROR: Project tools directory not found at ${SCRIPTS_PATH}" >&2
            echo "Available directories:" >&2
            ls -la . || true
            ls -la "${PROJECT_PATH}" || true
            echo ""
            if [ -n "${{ inputs.project_tools_dir }}" ]; then
              echo "HINT: You specified project_tools_dir='${{ inputs.project_tools_dir }}' but it doesn't exist." >&2
              echo "HINT: Check the path or ensure the submodule is properly initialized." >&2
            else
              echo "HINT: If using submodules, ensure the submodule is properly initialized." >&2
              echo "HINT: If using auto-clone, set auto_clone_tools: true" >&2
            fi
            exit 1
          fi
        else
          echo "Tools directory exists: ${SCRIPTS_PATH}"
          
          # Check if this looks like a submodule (has .git file or directory)
          if [ -f "${SCRIPTS_PATH}/.git" ] || [ -d "${SCRIPTS_PATH}/.git" ]; then
            echo "Detected submodule at ${SCRIPTS_PATH}"
            # Verify it's the correct submodule
            if [ -f "${SCRIPTS_PATH}/.git" ]; then
              SUBMODULE_URL=$(git config --file "${SCRIPTS_PATH}/.git" remote.origin.url 2>/dev/null || echo "")
              if [ "$SUBMODULE_URL" = "${TOOLS_REPO_URL}" ]; then
                echo "✓ Confirmed correct submodule: ${SUBMODULE_URL}"
              else
                echo "⚠️  Submodule URL mismatch: ${SUBMODULE_URL} (expected: ${TOOLS_REPO_URL})"
              fi
            fi
          else
            echo "Directory exists but doesn't appear to be a git repository"
          fi
        fi

        # Debug: List directory contents and check permissions
        echo "======================================================"
        echo "TOOLS DIRECTORY VALIDATION"
        echo "======================================================"
        echo "Scripts path (relative): ${SCRIPTS_PATH}"
        echo "Directory contents:"
        ls -la "${SCRIPTS_PATH}" || echo "Failed to list directory"
        echo ""
        echo "Checking script permissions:"
        
        # Validate required scripts exist and ensure they're executable
        REQUIRED_SCRIPTS=("generate_matrix.py" "build_app.sh" "config_loader.sh")
        for script in "${REQUIRED_SCRIPTS[@]}"; do
          script_path="${SCRIPTS_PATH}/${script}"
          if [ ! -f "${script_path}" ]; then
            echo "ERROR: Required script '${script}' not found in ${SCRIPTS_PATH}" >&2
            echo "Available scripts:" >&2
            ls -la "${SCRIPTS_PATH}" || true
            exit 1
          else
            echo "✓ Found ${script}: $(ls -la "${script_path}")"
            # Ensure script is executable
            chmod +x "${script_path}" 2>/dev/null || echo "Warning: Could not chmod ${script}"
          fi
        done

        echo "======================================================"
        echo "✓ All required scripts found and made executable in ${SCRIPTS_PATH}"
        echo "project_tools_path=${SCRIPTS_PATH}" >> "$GITHUB_OUTPUT"
