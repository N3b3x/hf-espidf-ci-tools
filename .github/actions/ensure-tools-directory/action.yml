---
name: "Ensure Tools Directory Present"
description: "Clone or validate the presence of project tools directory"
inputs:
  project_tools_dir:
    description: >
      Path to project tools directory (contains scripts directly).
      Leave empty to auto-detect.
    required: false
  project_dir:
    description: "Path to the ESP-IDF project (contains CMakeLists.txt)"
    required: false
    default: "."
  auto_clone_tools:
    description: "Auto-clone tools repo if project_tools_dir is missing"
    required: false
    default: "true"
  tools_repo_url:
    description: "Git URL for project tools repository (must be from trusted source)"
    required: false
    default: "https://github.com/N3b3x/hf-espidf-project-tools.git"
  tools_repo_ref:
    description: "Branch or tag for project tools repository (use specific tags for production)"
    required: false
    default: "main"
  tools_repo_sha:
    description: "Specific commit SHA for project tools repository (most secure option)"
    required: false
outputs:
  project_tools_path:
    description: "Resolved path to the project tools directory"
    value: ${{ steps.resolve.outputs.project_tools_path }}
runs:
  using: "composite"
  steps:
    - name: Resolve and ensure tools directory
      id: resolve
      shell: bash
      run: |
        set -e
        
        # Extract directory name from repo URL (fallback to default)
        TOOLS_DIR_NAME=$(basename "${{ inputs.tools_repo_url }}" .git)
        echo "Tools directory name: ${TOOLS_DIR_NAME}"
        
        # Resolve project tools path using consistent logic
        if [ -n "${{ inputs.project_tools_dir }}" ]; then
          SCRIPTS_PATH="${{ inputs.project_tools_dir }}"
        else
          if [ -d "${{ inputs.project_dir }}/${TOOLS_DIR_NAME}" ]; then
            SCRIPTS_PATH="${{ inputs.project_dir }}/${TOOLS_DIR_NAME}"
          else
            SCRIPTS_PATH="${TOOLS_DIR_NAME}"
          fi
        fi

        echo "Resolved project tools path: ${SCRIPTS_PATH}"
        
        # Clone if directory doesn't exist and auto_clone_tools is true
        if [ ! -d "${SCRIPTS_PATH}" ] && [ "${{ inputs.auto_clone_tools }}" = "true" ]; then
          echo "Cloning tools repo to ${SCRIPTS_PATH}"
          
          # Security: Validate repo URL is from trusted source
          if [[ "${{ inputs.tools_repo_url }}" != https://github.com/N3b3x/* ]]; then
            echo "WARNING: Cloning from untrusted source: ${{ inputs.tools_repo_url }}" >&2
            echo "Only https://github.com/N3b3x/* repositories are considered trusted" >&2
          fi
          
          # Use SHA if provided (most secure), otherwise use ref
          if [ -n "${{ inputs.tools_repo_sha }}" ]; then
            echo "Cloning specific commit SHA: ${{ inputs.tools_repo_sha }}"
            git clone --depth 1 "${{ inputs.tools_repo_url }}" "${SCRIPTS_PATH}"
            cd "${SCRIPTS_PATH}"
            git checkout "${{ inputs.tools_repo_sha }}"
            cd - > /dev/null
          else
            echo "Cloning branch/tag: ${{ inputs.tools_repo_ref }}"
            git clone --depth 1 --branch "${{ inputs.tools_repo_ref }}" \
              "${{ inputs.tools_repo_url }}" "${SCRIPTS_PATH}"
          fi
        elif [ ! -d "${SCRIPTS_PATH}" ]; then
          echo "ERROR: Project tools directory not found at ${SCRIPTS_PATH}" >&2
          echo "Available directories:" >&2
          ls -la . || true
          ls -la "${{ inputs.project_dir }}" || true
          exit 1
        else
          echo "Tools directory exists: ${SCRIPTS_PATH}"
        fi

        # Validate required scripts exist
        REQUIRED_SCRIPTS=("generate_matrix.py" "build_app.sh" "config_loader.sh")
        for script in "${REQUIRED_SCRIPTS[@]}"; do
          if [ ! -f "${SCRIPTS_PATH}/${script}" ]; then
            echo "ERROR: Required script '${script}' not found in ${SCRIPTS_PATH}" >&2
            echo "Available scripts:" >&2
            ls -la "${SCRIPTS_PATH}" || true
            exit 1
          else
            echo "✓ Found ${script}"
          fi
        done

        echo "✓ All required scripts found in ${SCRIPTS_PATH}"
        echo "project_tools_path=${SCRIPTS_PATH}" >> "$GITHUB_OUTPUT"
